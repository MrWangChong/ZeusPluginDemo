apply plugin: 'com.android.application'
//start----------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------
apply plugin: 'patch-gradle-plugin'
//end------------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------
apply plugin: 'jar-gradle-plugin'//生成jar包插件

//为了可以使用public.xml来固定宿主的资源ID
apply from: 'public-xml.gradle'
android {
    compileSdkVersion 25
    buildToolsVersion "23.0.2"
    defaultConfig {
        applicationId "com.wc.android.demo"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    /**
     * --PLUG-resoure-proguard 表示资源混淆，去掉则资源不混淆
     * --PLUG-resoure-id  表示资源id命名（Package ID），后面参数表示对应资源id，去掉则为系统应用默认id'0x7f'
     */
    //去掉为了让demo不需要替换aapt就可以运行
    aaptOptions.additionalParameters '--PLUG-resoure-proguard', '--PLUG-resoure-id', '0x7f'

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'
    compile 'com.lzy.net:okgo:+'
    //版本号使用 + 可以自动引用最新版
    compile project(':ZeusPlugin')
    compile files('libs/AMap2DMap_4.2.0_AMapSearch_4.0.0_AMapLocation_3.3.0_20170120.jar')
}
//start----------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------
//如果enable为true则表明打出的包会在每个类的构造函数中添加如下代码:if (Boolean.FALSE.booleanValue())System.out.println(Predicate.class);
patchPlugin{
    enable = true
}
//end------------补丁相关，使用gradle插件，如果宿主是只运行于android 4.4及以上可以不添加这些代码------------------

//start----------插件相关的，用来生成sdk-jar的------------------
//具体使用参见https://github.com/iReaderAndroid/buildJar
BuildJar{
    //输出目录
    outputFileDir= project.buildDir.path+"/jar"
    //输出原始jar包名
    outputFileName="sdk.jar"
    //输出混淆jar包名
    outputProguardFileName="sdk_proguard.jar"
    //混淆配置
    proguardConfigFile="proguard-rules.pro"
    //是否需要默认的混淆配置proguard-android.txt
    needDefaultProguard=true
//    applyMappingFile="originMapping/mapping.txt"
    //需要输出jar的包名列表,当此参数为空时，则默认全项目输出,支持多包,如 includePackage=['com/adison/testjarplugin/include','com/adison/testjarplugin/include1'...]
//    includePackage=['com/adison/testjarplugin/include']
//    //不需要输出jar的jar包列表,如['baidu.jar','baidu1.jar'...]
//    excludeJar=[]
//    //不需要输出jar的类名列表,如['baidu.calss','baidu1.class'...]
//    excludeClass=['com/adison/testjarplugin/TestExcude.class']
//    //不需要输出jar的包名列表,如 excludePackage=['com/adison/testjarplugin/exclude','com/adison/testjarplugin/exclude1'...]
//    excludePackage=['com/adison/testjarplugin/exclude']
}

//end----------插件相关的，用来生成sdk-jar的------------------